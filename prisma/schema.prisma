// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  UserID        String     @id @default(uuid()) // Primary Key
  UserName      String
  Email         String     @unique
  Password      String
  WorkingStyle  String?
  ProfileImage  String?
  Bio           String?
  MessagesSent  Message[]  @relation("MessagesSent")
  MessagesReceived Message[] @relation("MessagesReceived")
  SwipesMade    Swipe[]    @relation("SwipesMade")
  SwipesReceived Swipe[]   @relation("SwipesReceived")
  Notifications Notification[]
  UserSkills    UserSkills[] // Relation to UserSkills (many-to-many with Skills)
  Teams         Team[]     @relation("TeamMembers") // One user can be part of multiple teams
  CreatedAt     DateTime   @default(now())
  UpdatedAt     DateTime   @updatedAt @default(now())
}

model Message {
  MessageID     Int       @id @default(autoincrement()) // Primary Key
  Sender        User      @relation("MessagesSent", fields: [SenderID], references: [UserID])
  SenderID      String
  Receiver      User      @relation("MessagesReceived", fields: [ReceiverID], references: [UserID])
  ReceiverID    String
  MessageContent String
  Timestamp     DateTime  @default(now())
  ReadStatus    Boolean   @default(false)
}

model Swipe {
  SwipeID       Int       @id @default(autoincrement()) // Primary Key
  SwipingUser   User      @relation("SwipesMade", fields: [SwipingUserID], references: [UserID])
  SwipingUserID String
  SwipedUser    User      @relation("SwipesReceived", fields: [SwipedUserID], references: [UserID])
  SwipedUserID  String
  SwipeAction   String    // "Like" or "Dislike"
  Timestamp     DateTime  @default(now())
}

model Notification {
  NotificationID Int      @id @default(autoincrement()) // Primary Key
  User           User     @relation(fields: [UserID], references: [UserID])
  UserID         String
  NotificationContent String
  Timestamp      DateTime @default(now())
  ReadStatus     Boolean  @default(false)
}

model Skills {
  Skill_ID     Int        @id @default(autoincrement()) // Primary Key
  Skill_Name   String     @unique // Unique skill name
  UserSkills   UserSkills[] // Relation to UserSkills
}

model UserSkills {
  UserSkill_ID Int        @id @default(autoincrement()) // Primary Key
  User         User       @relation(fields: [UserID], references: [UserID])
  UserID       String
  Skill        Skills     @relation(fields: [Skill_ID], references: [Skill_ID], onDelete: Cascade)
  Skill_ID     Int
  // Add more fields if you need, like skill level or proficiency
}

model Hackathon {
  HackathonID   Int      @id @default(autoincrement())
  Name          String
  Description   String
  StartDate     DateTime
  EndDate       DateTime
  Location      String
  Teams         Team[]   // One Hackathon can have multiple teams
  CreatedAt     DateTime @default(now())
  UpdatedAt     DateTime @updatedAt
}

model Team {
  TeamID        Int      @id @default(autoincrement())
  TeamName      String
  HackathonID   Int
  Hackathon     Hackathon @relation(fields: [HackathonID], references: [HackathonID])
  Members       User[]    @relation("TeamMembers") // One team can have multiple users
  CreatedAt     DateTime @default(now())
  UpdatedAt     DateTime @updatedAt
}